##############################
# Python packaging settings: #

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "videbo"
description = "Video hosting server for learning management systems"
authors = [
    { name = "Martin Gauk", email = "gauk@math.tu-berlin.de" },
    { name = "Daniil Fajnberg", email = "mail@daniil.fajnberg.de" },
]
maintainers = [
    { name = "ISIS Team", email = "info@isis.tu-berlin.de" },
]
requires-python = ">=3.9, <4.0"
keywords = [
    "aiohttp",
    "moodle",
    "server",
    "streaming",
    "video",
]
license = { text = "GNU General Public License v3 or later (GPLv3+)" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: POSIX",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: System Administrators",
    "Framework :: AsyncIO",
    "Framework :: aiohttp",
    "Topic :: Education",
    "Topic :: Internet",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Multimedia",
    "Topic :: Multimedia :: Video",
]
dynamic = [
    "readme",
    "version",
]
dependencies = [
    "aiohttp==3.11.14",
    "pydantic==1.10.21",
    "PyJWT==2.10.1",
    "tomli==2.2.1",
]

[project.optional-dependencies]
full = [
    "prometheus-client==0.21.1",
]
dev = [
    "videbo[full]",
    "build==1.2.2.post1",
    "coverage[toml]==7.6.12",
    "mkdocs-material==9.6.7",
    "mkdocstrings[python]==0.29.0",
    "mypy==1.15.0",
    "ruff==0.9.10",
]

[project.urls]
repository = "https://github.com/innocampus/videbo"
bug_tracker = "https://github.com/innocampus/videbo/issues"
documentation = "https://innocampus.github.io/videbo"

[tool.setuptools.dynamic]
readme = { file = ["README.md"] }
version = { attr = "videbo.__version__" }


#########################
# Static type checking: #

[tool.mypy]
cache_dir = ".cache/mypy"
files = [
    "src/",
#    "tests/",
]
warn_unused_configs = true
strict = true
show_error_codes = true
plugins = [
    "pydantic.mypy",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


#######################
# Unit test coverage: #

[tool.coverage.run]
data_file = ".cache/coverage"
source = [
    "src/",
]
branch = true
command_line = "-m tests"
omit = [
    ".venv*/*",
]

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_also = [
    "if TYPE_CHECKING:",
    "if __name__ == ['\"]__main__['\"]:",
    "@overload",
    "assert_never",
    "@(abc\\.)?abstractmethod",
]
omit = [
    "tests/*",
]


###############################
# Linting and style checking: #

[tool.ruff]
cache-dir = ".cache/ruff"

[tool.ruff.lint]
select = [
    "F",    # pyflakes
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "N",    # pep8-naming
#    "D",    # pydocstyle
#    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
#    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C",    # flake8-comprehensions
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TD",   # flake8-todos
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # pylint
#    "TRY",  # tryceratops
    "RUF",  # ruff-specific
]
ignore = [
    "E501",  # Line too long -> will be handled by auto-formatting later
    "D203",  # 1 blank line required before class docstring -> D211 is better
    "D212",  # Multi-line docstring summary should start at the first line -> D213 is better
    "D401",  # First line of docstring should be in imperative mood -> no, it shouldn't
    "D407",  # Missing dashed underline after section -> different docstring style
    "N818",  # Exception name {name} should be named with an Error suffix -> no, it shouldn't
    "A003",  # Class attribute {name} is shadowing a Python builtin -> namespaces make this OK
]

[tool.ruff.lint.per-file-ignores]
"src/**/__init__.py" = [
    "A001",  # Variable {name} is shadowing a Python builtin
]
"src/videbo/cli/storage.py" = [
    "T201",  # `print` found -> fine for the CLI output
]
"tests/*.py" = [
    "D100",     # Missing docstring in public module
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D104",     # Missing docstring in public package
    "S105",     # Possible hardcoded password
    "PLR0915",  # Too many statements
]

[tool.ruff.lint.flake8-builtins]
builtins-allowed-modules = ["types"]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.class_validators.validator",
]
extend-ignore-names = [
    "tearDownAsync",  # method defined on `aiohttp.test_utils.AioHTTPTestCase`
]

[tool.ruff.lint.pylint]
max-args = 8
