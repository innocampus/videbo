{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Videbo","text":"<p>Distributed video hosting for Moodle and other LMS</p> <p>Documentation:  https://innocampus.github.io/videbo </p> <p>Source Code:  https://github.com/innocampus/videbo </p> <p>Videbo is a video hosting server specifically designed for Moodle and other learning management systems (LMS).</p> <p>It exposes an intuitive API for uploading, downloading, and streaming videos, which can be accessed via Moodle <code>mod_videoservice</code> and similar plugins.</p> <p>Videbo is written in Python, and it is powered by <code>aiohttp</code>, <code>Pydantic</code>, and <code>PyJWT</code>.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Performant: Asynchronous HTTP server that can easily handle large request loads.</li> <li>Reliable: Built-in distribution and load balancing capabilities. Dynamically enable/disable distributor nodes at any time.</li> <li>Integrated: Designed to be compatible with <code>mod_videoservice</code> out of the box.</li> <li>Well-tested: Used in production continuously since 2020 at the Technical University of Berlin (approx. 35k students) and during the peak of the remote-learning period.</li> <li>Secure: Authentication via industry standard JSON Web Tokens.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Videbo is easily installed with <code>pip</code> like this: <pre><code>pip install videbo\n</code></pre></p> <p>To install Videbo including all optional features: <pre><code>pip install 'videbo[full]'\n</code></pre></p> <p>The latter includes monitoring capabilities for the Prometheus Node Exporter.</p> <p>To install Videbo for development and/or testing from the checked-out code repository, run the following from the repository root: <pre><code>pip install -e '.[dev]'\n</code></pre></p> <p>This will install it in editable mode and also install all dev-dependencies.</p>"},{"location":"#system-dependencies","title":"System dependencies","text":"<ul> <li>Linux</li> <li>Python 3.9+</li> <li><code>sudo</code></li> <li><code>ffmpeg</code>/<code>ffprobe</code></li> </ul>"},{"location":"advanced-config/","title":"Advanced configuration","text":""},{"location":"advanced-config/#settings-sources","title":"Settings sources","text":"<p>When Videbo is run, the first thing it does is to load all the settings it requires to. All settings have a sensible default value, which means it is technically not required to provide any configuration. However for any reasonable use case beyond testing, you will want to provide specific configuration.</p> <p>Videbo overloads its settings from multiple sources in the following order:</p> <ol> <li>Config file(s)</li> <li>Environment variables</li> <li>Command line options</li> </ol> <p>This means for example that the <code>listen_port</code> directive in a configuration file will always be ignored in favor of a <code>-P</code>/<code>--listen-port</code> option provided on the command line.</p> <p>By default, Videbo will search for configuration files in the following locations in that order:</p> <ol> <li><code>/etc/videbo/config.toml</code></li> <li><code>./config.toml</code></li> </ol> <p>The order of precedence is analogous to the one described above. If you provide custom configuration file paths via the <code>-c</code>/<code>--config-file-paths</code> command line option, directives placed there will take precedence over those in the default config files listed above.</p>"},{"location":"advanced-config/#environment-variables","title":"Environment variables","text":"<p>In addition to CLI and config files, you have the option of setting any configuration directive via an environment variable. All environment variables for Videbo must have the following form: <pre><code>VIDEBO_[DIRECTIVE]\n</code></pre></p> <p>Here <code>[DIRECTIVE]</code> must correspond to a valid configuration directive. See the <code>example.config.toml</code> for an exhaustive listing of all available directives and their meaning. Environment variable names are not case-sensitive. The following are both valid for example: <pre><code>export VIDEBO_INTERNAL_API_SECRET=supersecretstring\nexport videbo_listen_port=9001\n</code></pre></p>"},{"location":"reverse-proxy/","title":"Setting up a Reverse Proxy for Videbo","text":""},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#intro","title":"Intro","text":"<p>With Videbo there are three fundamental modes of operation:</p> <ul> <li>Running a Storage Node</li> <li>Running a Distributor Node</li> <li>Executing administrative commands</li> </ul> <p>The Storage Node is the central part of the Videbo. It encompasses the main video hosting API, format checking, monitoring capabilities (optional), and distribution logic (optional). It has its own webserver and it can be run as a standalone service. Every Videbo setup requires exactly one Storage Node.</p> <p>The purpose of a Distributor Node is to provide load balancing and redundancy to a Videbo hosting service. Any (reasonable) number of Distributor Nodes can be connected to one Storage Node. Depending on the overall configuration and load, requests for video streams are automatically redirected from Storage to Distributor.</p> <p>Additionally, Videbo has a built-in command line interface (CLI). It can be used for communication and even on-line interaction with a running Storage Node. It allows you to query the current node status, find orphaned files, as well as to disable/enable Distributor Nodes on the fly.</p> <p>The following sections give an overview of the core functionality of Videbo in the most common use cases.</p>"},{"location":"usage/#running-a-storage-node","title":"Running a Storage Node","text":""},{"location":"usage/#creating-a-config-file","title":"Creating a config file","text":"<p>After installing Videbo, create a configuration file: <pre><code>mkdir /etc/videbo\ntouch /etc/videbo/config.toml\n</code></pre> Videbo uses the TOML format for all its configuration files. The default configuration file path for a Videbo node is <code>/etc/videbo/config.toml</code>.</p> <p>The minimum recommendation is to at least configure your storage directory. This is where all the video files will be uploaded, where the thumbnails will be save, etc.</p> <p>By default, files will be stored in <code>/tmp/videbo</code>.</p> <p>To specify your storage directory, open the configuration file and add the following: config.toml<pre><code>files_path = \"/path/to/video/storage\"\n</code></pre></p> <p>Make sure the directory exists and your user has write access to it.</p>"},{"location":"usage/#starting-the-server","title":"Starting the server","text":"<p>Now you can run the storage node: <pre><code>python -m videbo storage\n</code></pre></p> <p>You should immediately see a few log messages appear in your terminal followed by a notice about where your server is listening: <pre><code>...\nINFO:videbo.storage.util:Found 0 videos in storage\n...\n======== Running on http://127.0.0.1:9020 ========\n(Press CTRL+C to quit)\n</code></pre></p> <p>As you can see, by default, the server will listen for incoming requests on http://127.0.0.1:9020. If you want it to bind to a different port, say <code>8080</code>, you can do so via the command line: <pre><code>python -m videbo -P 8080 storage\n</code></pre></p> <p>Alternatively, you can set the port in your config file: config.toml<pre><code>files_path = \"/path/to/video/storage\"\nlisten_port = 8080\n</code></pre></p> <p>Note</p> <p>Command line parameters will always take precedence over the configuration file.</p> <p>All available configuration options are explained here.</p> <p>Technically, this setup is all you need for Videbo.</p>"},{"location":"usage/#connect-a-moodle-instance","title":"Connect a Moodle instance","text":"<p>To try it out with a local Moodle instance, you can install the <code>mod_videoservice</code> there, then navigate to <code>Plugins</code> \u2192 <code>Activity modules</code> \u2192 <code>Video service</code> and adjust the video server URL in the settings: video_server_url<pre><code>http://localhost:8080\n</code></pre></p> <p>Since we changed the listen port, we will need to adjust the \"public\" facing URL of our Storage Node accordingly, so that Moodle can route our video requests properly: config.toml<pre><code>files_path = \"/path/to/video/storage\"\nlisten_port = 8080\npublic_base_url = \"http://localhost:8080\"\n</code></pre></p> <p>Then create a <code>Video</code> activity within a course. Inside that activity you can now upload, manage, stream, and download videos. The files should appear inside your <code>/path/to/video/storage</code> directory.</p>"},{"location":"usage/#securing-the-storage-node","title":"Securing the Storage Node","text":"<p>In production, this setup would be completely insecure because we did not define a shared secret between our Moodle instance and Videbo. Without that, anyone could theoretically upload videos to a public facing Storage Node. We secure our Videbo Node in the config file: config.toml<pre><code>files_path = \"/path/to/video/storage\"\nlisten_port = 8080\npublic_base_url = \"http://localhost:8080\"\ninternal_api_secret = 'OUR_SUPER_SECURE_INTERNAL_SECRET'\nexternal_api_secret = 'OUR_SUPER_SECURE_EXTERNAL_SECRET'\n</code></pre></p> <p>The <code>internal_api_secret</code> is what secures the node for administrative commands.</p> <p>Note</p> <p>In TOML a string value can be safely enclosed in single quotes <code>'</code>, if it is supposed to be a literal and not have special escape sequences (e.g. <code>jC\\n:6s[z</code>). This is useful for things like passwords. If the string itself may contain single quotes, a multi-line literal can be used that is enclosed by three single quotes <code>'''</code>.</p> <p>The <code>external_api_secret</code> is shared with our Moodle instance. We again set it in the <code>Video service</code> Plugin settings: video_api_secret<pre><code>OUR_SUPER_SECURE_EXTERNAL_SECRET\n</code></pre></p>"},{"location":"usage/#running-a-distributor-node","title":"Running a Distributor Node","text":""},{"location":"usage/#configuring-the-nodes","title":"Configuring the nodes","text":"<p>The setup for a Distributor Node is essentially the same as with the Storage Node. Following installation we need to create a config file.</p> <p>If we just want to have a local testing setup, we can spin up a Distributor Node on the same host as our Storage Node. To do that, we need to put the Distributor Node configuration in a separate file: config.toml (Distributor)<pre><code>files_path = \"/path/to/video/distributor\"\nlisten_port = 8081\npublic_base_url = \"http://localhost:8080\"\ninternal_api_secret = 'OUR_SUPER_SECURE_INTERNAL_SECRET'\nexternal_api_secret = 'OUR_SUPER_SECURE_EXTERNAL_SECRET'\n</code></pre></p> <p>We already discussed why we configure the files path, listen port, and secrets in the Storage section. We let our Distributor Node bind locally to port <code>8081</code> in this example.</p> <p>The config parameter <code>public_base_url</code> must to be set to the same value as on our Storage Node. In this case, since we are creating a local test-setup, the url is <code>http://localhost:8080</code> as we configured it in the previous chapter.</p> <p>Tip</p> <p>If we just want to have a local testing setup, we can spin up a Distributor Node on the same host as our Storage Node. To do that, we need to put the Distributor Node configuration in a separate file (say <code>/etc/videbo/config_dist.toml</code>) and launch it with the <code>-c</code> command line option (see below).</p> <p>Next, we need to configure our Storage Node to make it aware of the available Distributor: config.toml<pre><code>files_path = \"/path/to/video/storage\"\nlisten_port = 8080\npublic_base_url = \"http://localhost:8080\"\ninternal_api_secret = 'OUR_SUPER_SECURE_INTERNAL_SECRET'\nexternal_api_secret = 'OUR_SUPER_SECURE_EXTERNAL_SECRET'\n\n[distribution]\nstatic_node_base_urls = \"http://localhost:8081\"\n</code></pre> The <code>static_node_base_urls</code> parameter accepts either an array or a comma-separated list of Distributor Node base URLs. (If there is only one distributor node, a single URL is also valid.)</p>"},{"location":"usage/#starting-the-distributor-node","title":"Starting the Distributor Node","text":"<p>Once the setup is complete, we can start the Distributor Node: <pre><code>python -m videbo distributor\n</code></pre></p> <p>Again, you should see some logs appear in the terminal and a notice about where the server is listening. Only now, once the the Distributor has started, should you (re-)start the Storage Node from a separate terminal: <pre><code>python -m videbo storage\n</code></pre></p> <p>If the config files are located under different paths (e.g. because we want two nodes running on the same host), we can specify them using the <code>-c</code>/<code>--config-file-paths</code> CLI option: <pre><code>python -m videbo -c ./config_dist.toml distributor\n</code></pre></p> <pre><code>python -m videbo -c ./config_storage.toml storage\n</code></pre> <p>The Storage Node will immediately begin its periodical checks of the status of the enabled Distributor Nodes. In the log output of the Storage Node, you should see a message like this: <pre><code>...\nINFO:videbo.storage.distribution:Added new &lt;Distributor http://localhost:8081&gt;\n...\n======== Running on http://127.0.0.1:8080 ========\n(Press CTRL+C to quit)\nINFO:videbo.distributor.node:Connected to &lt;Distributor http://localhost:8081&gt; ...\nINFO:videbo.distributor.node:Found 0 files on &lt;Distributor http://localhost:8081&gt;\n</code></pre></p> <p>Whereas the Distributor will output messages about incoming status requests every few seconds. These are made by the Storage Node.</p> <p>...</p>"}]}